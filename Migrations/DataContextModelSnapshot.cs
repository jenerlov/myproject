// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using myproject.Contexts;

#nullable disable

namespace MvcMovie.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4ba55a8f-2d83-40f8-aacb-3a2a316f563d",
                            ConcurrencyStamp = "cc85cb6e-dfe5-4808-9a86-3ae02aa6b8d7",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "420862bf-2ae3-444f-9a9e-6aa2278bc06a",
                            ConcurrencyStamp = "e212346a-c1c1-4add-951d-dba03439ba5b",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "a6c6c2d9-2a3a-4df2-83dd-1a70716a90a2",
                            RoleId = "079e9257-8788-441b-8e1b-6b0d6e5becd9"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("myproject.Models.Entities.AddressEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("myproject.Models.Entities.ContactFormEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("myproject.Models.Entities.ProductEntity", b =>
                {
                    b.Property<string>("ArticleNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ingress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArticleNumber");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ArticleNumber = "1000",
                            Description = "A very nice poster for your posterwall",
                            ImageUrl = "https://images.pexels.com/photos/17814801/pexels-photo-17814801/free-photo-of-ljus-stad-vag-trafik.jpeg?auto=compress&cs=tinysrgb&w=800&lazy=load",
                            Ingress = "Very nice poster",
                            Price = "1000",
                            ProductName = "NicePoster1"
                        },
                        new
                        {
                            ArticleNumber = "1001",
                            Description = "Poster for your posterwall",
                            ImageUrl = "https://images.pexels.com/photos/17216606/pexels-photo-17216606/free-photo-of-vaxt-lov-vaxa-botanik.jpeg?auto=compress&cs=tinysrgb&w=800&lazy=load",
                            Ingress = "Very nice poster",
                            Price = "200",
                            ProductName = "NicePoster1"
                        },
                        new
                        {
                            ArticleNumber = "1002",
                            Description = "Poster for your posterwall",
                            ImageUrl = "https://images.pexels.com/photos/16821073/pexels-photo-16821073/free-photo-of-hav-solnedgang-moln-gaende.jpeg?auto=compress&cs=tinysrgb&w=800&lazy=load",
                            Ingress = "Very nice poster",
                            Price = "200",
                            ProductName = "Nice Poster1"
                        },
                        new
                        {
                            ArticleNumber = "1003",
                            Description = "Poster for your posterwall",
                            ImageUrl = "https://images.pexels.com/photos/17135751/pexels-photo-17135751/free-photo-of-fotografi-vintage-lins-klassisk.jpeg?auto=compress&cs=tinysrgb&w=800&lazy=load",
                            Ingress = "Very nice poster",
                            Price = "200",
                            ProductName = "Nice Poster1"
                        },
                        new
                        {
                            ArticleNumber = "1004",
                            Description = "Poster for your posterwall",
                            ImageUrl = "https://images.pexels.com/photos/11254133/pexels-photo-11254133.jpeg?auto=compress&cs=tinysrgb&w=800&lazy=load",
                            Ingress = "Very nice poster",
                            Price = "200",
                            ProductName = "Nice Poster1"
                        },
                        new
                        {
                            ArticleNumber = "1005",
                            Description = "Poster for your posterwall",
                            ImageUrl = "https://images.pexels.com/photos/17119396/pexels-photo-17119396/free-photo-of-kamera-bord-lins-mobel.jpeg?auto=compress&cs=tinysrgb&w=800&lazy=load",
                            Ingress = "Very nice poster",
                            Price = "200",
                            ProductName = "Nice Poster1"
                        },
                        new
                        {
                            ArticleNumber = "1006",
                            Description = "Poster for your posterwall",
                            ImageUrl = "https://images.pexels.com/photos/10762012/pexels-photo-10762012.jpeg?auto=compress&cs=tinysrgb&w=800&lazy=load",
                            Ingress = "Very nice poster",
                            Price = "200",
                            ProductName = "Nice Poster1"
                        },
                        new
                        {
                            ArticleNumber = "1007",
                            Description = "Poster for your posterwall",
                            ImageUrl = "https://images.pexels.com/photos/17763903/pexels-photo-17763903/free-photo-of-stad-vatten-byggnad-bro.jpeg?auto=compress&cs=tinysrgb&w=800&lazy=load",
                            Ingress = "Very nice poster",
                            Price = "200",
                            ProductName = "Nice Poster1"
                        },
                        new
                        {
                            ArticleNumber = "1008",
                            Description = "Poster for your posterwall",
                            ImageUrl = "https://images.pexels.com/photos/17759985/pexels-photo-17759985/free-photo-of-landskap-natur-skog-trad.jpeg?auto=compress&cs=tinysrgb&w=800&lazy=load",
                            Ingress = "Very nice poster",
                            Price = "200",
                            ProductName = "Nice Poster1"
                        },
                        new
                        {
                            ArticleNumber = "1009",
                            Description = "Poster for your posterwall",
                            ImageUrl = "https://images.pexels.com/photos/17760623/pexels-photo-17760623/free-photo-of-stad-byggnad-kontor-arkitektur.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2",
                            Ingress = "Very nice poster",
                            Price = "200",
                            ProductName = "Nice Poster1"
                        },
                        new
                        {
                            ArticleNumber = "1010",
                            Description = "Poster for your posterwall",
                            ImageUrl = "https://images.pexels.com/photos/17756333/pexels-photo-17756333/free-photo-of-semester-vatten-hotell-sommar.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2",
                            Ingress = "Very nice poster",
                            Price = "200",
                            ProductName = "Nice Poster1"
                        },
                        new
                        {
                            ArticleNumber = "1011",
                            Description = "Poster for your posterwall",
                            ImageUrl = "https://images.pexels.com/photos/17868851/pexels-photo-17868851/free-photo-of-stad-byggnad-kontor-arkitektur.jpeg",
                            Ingress = "Very nice poster",
                            Price = "200",
                            ProductName = "Nice Poster1"
                        });
                });

            modelBuilder.Entity("myproject.Models.Entities.ProductTagEntity", b =>
                {
                    b.Property<string>("ArticleNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("ArticleNumber", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ProductTags");

                    b.HasData(
                        new
                        {
                            ArticleNumber = "1000",
                            TagId = 4
                        },
                        new
                        {
                            ArticleNumber = "1001",
                            TagId = 4
                        },
                        new
                        {
                            ArticleNumber = "1002",
                            TagId = 4
                        },
                        new
                        {
                            ArticleNumber = "1003",
                            TagId = 4
                        },
                        new
                        {
                            ArticleNumber = "1004",
                            TagId = 5
                        },
                        new
                        {
                            ArticleNumber = "1005",
                            TagId = 5
                        },
                        new
                        {
                            ArticleNumber = "1006",
                            TagId = 5
                        },
                        new
                        {
                            ArticleNumber = "1007",
                            TagId = 6
                        },
                        new
                        {
                            ArticleNumber = "1009",
                            TagId = 6
                        },
                        new
                        {
                            ArticleNumber = "1010",
                            TagId = 6
                        });
                });

            modelBuilder.Entity("myproject.Models.Entities.TagEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            TagName = "New Posters"
                        },
                        new
                        {
                            Id = 5,
                            TagName = "Featured posters"
                        },
                        new
                        {
                            Id = 6,
                            TagName = "Popular Posters"
                        });
                });

            modelBuilder.Entity("myproject.Models.Entities.UserAddressEntity", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "AddressId");

                    b.HasIndex("AddressId");

                    b.ToTable("UserAddresses");
                });

            modelBuilder.Entity("myproject.Models.Entities.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a6c6c2d9-2a3a-4df2-83dd-1a70716a90a2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "73f331eb-99b5-4f52-aebd-79833ad01b1e",
                            Email = "admin@domain.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@DOMAIN.COM",
                            NormalizedUserName = "ADMIN@DOMAIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIJ65WA+8bp391U1R0lmz9sTNGLgjW1x3vCCGB4h8yLDD6SNUElSr9ZUpIXO4R9VmA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fff996f9-71a5-4114-a1e5-1ea5ead28a77",
                            TwoFactorEnabled = false,
                            UserName = "admin@domain.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("myproject.Models.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("myproject.Models.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("myproject.Models.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("myproject.Models.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("myproject.Models.Entities.ProductTagEntity", b =>
                {
                    b.HasOne("myproject.Models.Entities.ProductEntity", "Product")
                        .WithMany("Tags")
                        .HasForeignKey("ArticleNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("myproject.Models.Entities.TagEntity", "Tag")
                        .WithMany("Products")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("myproject.Models.Entities.UserAddressEntity", b =>
                {
                    b.HasOne("myproject.Models.Entities.AddressEntity", "Address")
                        .WithMany("UsersAdresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("myproject.Models.Entities.UserEntity", "User")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("myproject.Models.Entities.AddressEntity", b =>
                {
                    b.Navigation("UsersAdresses");
                });

            modelBuilder.Entity("myproject.Models.Entities.ProductEntity", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("myproject.Models.Entities.TagEntity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("myproject.Models.Entities.UserEntity", b =>
                {
                    b.Navigation("UserAddresses");
                });
#pragma warning restore 612, 618
        }
    }
}
